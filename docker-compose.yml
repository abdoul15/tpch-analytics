services:
  spark-master:
    image: spark-image 
    container_name: spark-master
    entrypoint: ['./entrypoint.sh', 'master']
    build:
      context: ./spark
      dockerfile: Dockerfile 
    ports:
      - "4040:4040"
      - "9090:8080"
      - "7077:7077"
      - '3002:3002' # Jupyter notebook

    volumes:
      - spark-logs:/opt/spark/spark-events
      - tpch-data:/opt/tpch-data
      - ./notebooks:/opt/spark/notebooks
      - ./tpch_etl_pipeline:/opt/spark/project/tpch_etl_pipeline  
    env_file:
      - .env.spark
  
  spark-history-server:
    container_name: spark-history
    image: spark-image
    entrypoint: ['./entrypoint.sh', 'history']
    depends_on:
      - spark-master
    env_file:
      - .env.spark
    volumes:
      - spark-logs:/opt/spark/spark-events
      - ./notebooks:/opt/spark/notebooks
      - ./tpch_etl_pipeline:/opt/spark/project/tpch_etl_pipeline  
    ports:
      - '18080:18080'
  
  spark-worker:
    image: spark-image
    entrypoint: ['./entrypoint.sh', 'worker']
    volumes:
      - spark-logs:/opt/spark/spark-events
      - tpch-data:/opt/tpch-data
      - ./notebooks:/opt/spark/notebooks
      - ./tpch_etl_pipeline:/opt/spark/project/tpch_etl_pipeline 
    env_file:
      - .env.spark
  

  minio:
    image: 'minio/minio:latest'
    container_name: minio
    ports:
      - '9000:9000'  # API S3
      - '9001:9001'  # Console Web
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    command: server --console-address ":9001" /data
    volumes:
      - minio-data:/data
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    
  
  createbuckets:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
        /usr/bin/mc config host add myminio http://minio:9000 ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY};
        /usr/bin/mc mb myminio/spark-bucket;
        /usr/bin/mc policy set download myminio/spark-bucket;
        exit 0;
      "
  
  upstream_data:
    image: postgres:15
    container_name: upstream_data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./postgres/load-tpch.sh:/docker-entrypoint-initdb.d/02-load-tpch.sh:ro
      - postgres-data:/var/lib/postgresql/data
      - tpch-data:/opt/tpch-data  # Ajout du volume partagé

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tpchuser -d tpchdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Trino pour accéder aux tables Delta
  trino:
    image: 'trinodb/trino:414'
    container_name: trino
    ports:
      - '8080:8080'
    volumes:
      - ./trino/etc:/etc/trino
      - ./trino/catalog:/etc/trino/catalog
      - ./trino/delta-catalog:/etc/trino/delta-catalog
      - trino-data:/data/trino
    environment:
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
    depends_on:
      - minio
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/info"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Superset avec configuration simplifiée
  superset:
    image: apache/superset:latest
    container_name: superset
    depends_on:
      upstream_data:
        condition: service_healthy
      trino:
        condition: service_healthy
    ports:
      - "8088:8088"
    environment:
      SUPERSET_SECRET_KEY: ${SUPERSET_SECRET_KEY:-superset-secret}
      # Utiliser SQLite pour simplifier la configuration
      SQLALCHEMY_DATABASE_URI: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@upstream_data:5432/${POSTGRES_DB}
      PYTHONPATH: /app/pythonpath
      SUPERSET_LOAD_EXAMPLES: "yes"
      FLASK_ENV: development
      SUPERSET_PORT: 8088
    volumes:
      - superset-data:/app/superset_home
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    command: >
      bash -c "
        pip install --no-cache-dir pyhive sqlalchemy-trino delta-spark &&
        superset db upgrade &&
        superset fab create-admin --username admin --firstname Superset --lastname Admin --email admin@superset.com --password admin123 &&
        superset init &&
        superset run -p 8088 --host 0.0.0.0 --with-threads --reload --debugger
      "

volumes:
  spark-logs:
  minio-data:
  postgres-data:
  tpch-data:
  superset-data:
  trino-data:
